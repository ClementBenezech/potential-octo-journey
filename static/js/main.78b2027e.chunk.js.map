{"version":3,"sources":["customHooks/useFetchApiData.js","components/BusinessCard.jsx","images/mansa.gif","components/Header.jsx","components/Nav.jsx","components/AccountCard.jsx","components/Accounts.jsx","components/App.js","reportWebVitals.js","index.js"],"names":["useFetchApiData","url","useState","apiData","setApiData","useEffect","fetch","mode","then","response","json","BusinessCard","props","data","className","title","last","first","legalName","siret","address","Header","alt","src","mansaImage","Nav","class","AccountCard","account","account_number","available","currency","Accounts","accountCards","Array","from","map","element","iban","App","currentNameApiData","currentSirenApiData","currentAccountsApiData","name","denomination","etablissement_siege","geo_adresse","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gTA8BeA,G,YA1BS,SAACC,GAIrB,MAA8BC,mBAAS,MAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAkBF,OAfEC,qBAAU,WAEU,OAAZF,GAEAG,MAAML,EAAK,CAACM,KAAM,SACjBC,MAAM,SAAAC,GAAQ,OACXA,EAASC,UACZF,MAAM,SAAAC,GAGHL,EAFaK,QAKlB,CAACN,EAASF,IAEZ,CAACE,EAASC,K,eCNJO,EAhBM,SAACC,GAClB,OAAmB,OAAfA,EAAMC,KAEF,sBAAKC,UAAY,gBAAjB,UACI,qBAAKA,UAAY,sBAAjB,SAAwCF,EAAMG,MAAM,IAAIH,EAAMI,KAAK,IAAIJ,EAAMK,QAC7E,qBAAKH,UAAY,gCAAjB,qBACA,qBAAKA,UAAY,+BAAjB,SAAiDF,EAAMM,YACvD,qBAAKJ,UAAY,+BAAjB,SAAiDF,EAAMO,QACvD,qBAAKL,UAAY,+BAAjB,SAAiDF,EAAMQ,aAIxD,2CChBA,G,MAAA,IAA0B,mCCa1BC,EARA,WAEX,OAAO,qBAAKP,UAAY,SAAjB,SACH,qBAAKQ,IAAM,aAAaC,IAAOC,OCIxBC,G,MARH,WAER,OAAO,sBAAKX,UAAY,MAAjB,UACH,mBAAGY,MAAM,yDACT,mBAAGA,MAAM,mCACT,mBAAGA,MAAM,4CCQFC,G,WAZK,SAACf,GAEb,OACI,sBAAKE,UAAY,eAAjB,UACI,qBAAKA,UAAY,sBAAjB,4BACA,qBAAKA,UAAY,sBAAjB,SAAwCF,EAAMgB,QAAQC,iBACtD,qBAAKf,UAAY,sBAAjB,qBACA,qBAAKA,UAAY,sBAAjB,SAAwCF,EAAMgB,QAAQE,UAAU,IAAIlB,EAAMgB,QAAQG,gBCMnFC,EAdE,SAACpB,GAGV,IAAMqB,EAAeC,MAAMC,KAAKvB,EAAMC,MAAMuB,KAAK,SAAAC,GAC7C,OAAO,cAAC,EAAD,CAAkCT,QAAWS,GAAzBA,EAAQC,SAIvC,OAAO,qBAAKxB,UAAY,WAAjB,SACFmB,KCoCEM,MApCf,WAGE,MAAoDvC,EAAgB,8BAApE,mBAAOwC,EAAP,KACA,GADA,KACsDxC,EAAgB,2EAAtE,mBAAOyC,EAAP,KACA,GADA,KAC4DzC,EAAgB,uCAA5E,mBAAO0C,EAAP,KAMA,OANA,KAM2B,OAAvBF,GAAuD,OAAxBC,GAA2D,OAA3BC,EAE/D,sBAAK5B,UAAU,MAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,sBAAKA,UAAY,eAAjB,UACQ,cAAC,EAAD,CACQC,MAASyB,EAAkB,QAAY,GAAGG,KAAK5B,MAC/CC,KAAQwB,EAAkB,QAAY,GAAGG,KAAK3B,KAC9CC,MAASuB,EAAkB,QAAY,GAAGG,KAAK1B,MAC/CC,UAAauB,EAAmB,aAAiBG,aACjDzB,MAASsB,EAAmB,aAAiBI,oBAAoB1B,MACjEC,QAAWqB,EAAmB,aAAiBI,oBAAoBC,cAE3E,cAAC,EAAD,CAAUjC,KAAQ6B,UAMzB,mBAAGhB,MAAM,+BChCLqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzC,MAAK,YAAkD,IAA/C0C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.78b2027e.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\n/* This custom hook fetches data from whatever url it gets as a parameter*/\r\n\r\nconst useFetchApiData = (url) => {\r\n\r\n\r\n    //Setting up a hook for our API data.\r\n    const [apiData, setApiData] = useState(null);\r\n\r\n    // Here we define what happens after component renders (like componentDidMount/componentDidUpdate)\r\n    useEffect(() => {\r\n        // If we do not have data from the API yet, fetch it!\r\n        if (apiData === null) {    \r\n        // Fetching data\r\n            fetch(url, {mode: 'cors'})\r\n            .then (response => \r\n                response.json())\r\n            .then (response => {\r\n                const data = response;\r\n                //setting new value for apiData with what we got from the API call\r\n                setApiData(data);\r\n        })}\r\n\r\n        }, [apiData, url])\r\n\r\n  return [apiData, setApiData]\r\n\r\n}\r\n\r\nexport default useFetchApiData","/* Here, we use all the data we got from the SIREN and randomUser APIs, and we display them from props*/\r\n\r\nimport '../styles/businessCard.scss'\r\n\r\nconst BusinessCard = (props) => {\r\n    if (props.data !== null) {\r\n        return (\r\n            <div className = \"business-card\">\r\n                <div className = \"business-card__name\">{props.title+\" \"+props.last+\" \"+props.first}</div>\r\n                <div className = \"business-card__company__title\">Company</div>\r\n                <div className = \"business-card__company__data\">{props.legalName}</div>\r\n                <div className = \"business-card__company__data\">{props.siret}</div>\r\n                <div className = \"business-card__company__data\">{props.address}</div>\r\n            </div>\r\n            )\r\n    } else {\r\n        return <div>Loading</div>\r\n    }\r\n    \r\n}\r\nexport default BusinessCard","export default __webpack_public_path__ + \"static/media/mansa.2dd54c92.gif\";","/* Nothing much to see here, just a header with a gif logo*/\r\n\r\nimport '../styles/header.scss'\r\nimport mansaImage from '../images/mansa.gif'\r\n\r\nconst Header = () => {\r\n\r\n    return <div className = 'header'>\r\n        <img alt = \"mansa_logo\" src = {mansaImage}></img>\r\n    </div>\r\n}\r\n\r\n\r\nexport default Header","//Nothing fancy to see here, just inactive navIcons*/\r\n\r\nimport \"../styles/nav.scss\"\r\n\r\nconst Nav = () => {\r\n\r\n    return <div className = 'nav'>\r\n        <i class=\"fas fa-coins nav__menu-item  nav__menu-item--current\"></i>\r\n        <i class=\"fas fa-user-alt nav__menu-item\"></i>\r\n        <i class=\"fas fa-sign-out-alt nav__menu-item\"></i>\r\n    </div>\r\n}\r\nexport default Nav","/* Here we use the props we got from the Account component, and generate a single account card with number and balance*/\r\n\r\nimport \"../styles/accounts.scss\"\r\nimport \"../styles/accountsCard.scss\"\r\n\r\nconst AccountCard = (props) => {\r\n\r\n        return (\r\n            <div className = \"account-card\">\r\n                <div className = \"account-card__label\">Account Number</div>\r\n                <div className = \"account-card__value\">{props.account.account_number}</div>\r\n                <div className = \"account-card__label\">Balance</div>\r\n                <div className = \"account-card__value\">{props.account.available+\" \"+props.account.currency}</div>\r\n            </div>\r\n\r\n        )\r\n}\r\nexport default AccountCard","\r\nimport \"../styles/accounts.scss\"\r\nimport AccountCard from \"./AccountCard\"\r\n\r\nconst Accounts = (props) => {\r\n\r\n        //Using map and the AccountCard Component, generate an array of react elements to display.\r\n        const accountCards = Array.from(props.data).map( element => {\r\n            return <AccountCard key = {element.iban} account = {element}/>\r\n        })\r\n    \r\n        // Returning the account cards array\r\n        return <div className = 'accounts'>\r\n            {accountCards}\r\n        </div>\r\n    \r\n    \r\n}\r\nexport default Accounts","\n//importing styles\nimport '../styles/App.css';\nimport \"../styles/base.scss\"\n//Importing our custom API-fetching component\nimport useFetchApiData from '../customHooks/useFetchApiData';\n//Importing Child components\nimport BusinessCard from './BusinessCard';\nimport Header from './Header';\nimport Nav from './Nav';\nimport Accounts from './Accounts';\n\n\nfunction App() {\n\n  //Setting up custom hooks, on for each of the API's we need to fetch\n  const [currentNameApiData, setCurrentNameApiData] = useFetchApiData(\"https://randomuser.me/api/\");\n  const [currentSirenApiData, setCurrentSirenApiData] = useFetchApiData(\"https://entreprise.data.gouv.fr/api/sirene/v3/unites_legales/852379890\");\n  const [currentAccountsApiData, setCurrentAccountsApiData] = useFetchApiData(\"https://kata.getmansa.com/accounts\")\n\n\n  // Checking if all APIs sent data back\n  // Note with this approach, if one of the calls fails, the App will forever load.\n  // We could avoid this by checking this inside the child component instead of the parent.\n  if (currentNameApiData !== null && currentSirenApiData !== null && currentAccountsApiData !== null) {\n    return (\n      <div className=\"App\">\n          <Header />\n          <Nav />\n          <div className = \"main-content\">\n                  <BusinessCard \n                          title = {currentNameApiData['results'][0].name.title} \n                          last = {currentNameApiData['results'][0].name.last}\n                          first = {currentNameApiData['results'][0].name.first}\n                          legalName = {currentSirenApiData['unite_legale'].denomination}\n                          siret = {currentSirenApiData['unite_legale'].etablissement_siege.siret}\n                          address = {currentSirenApiData['unite_legale'].etablissement_siege.geo_adresse}\n                  />\n                  <Accounts data = {currentAccountsApiData}/>\n          </div>\n       </div>\n    );\n  }\n  else {\n    return <i class=\"fas fa-cog fa-spin loader\"></i>;\n  }\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}